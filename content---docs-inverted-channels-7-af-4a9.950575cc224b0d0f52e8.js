(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{51:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return s}),n.d(t,"default",function(){return p});n(0);var r=n(59);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={id:"inverted-channels",title:"Inverted Channels"},s=[],c={rightToc:s},l="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(l,a({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Sometimes, you want to create an async iterator which responds to calls to ",Object(r.b)("inlineCode",{parentName:"p"},"next")," as asynchronous events themselves. For instance, you might want to create a timer channel which fires a fixed period of time after ",Object(r.b)("inlineCode",{parentName:"p"},"next")," is called, or even throws an error if it is not called within that fixed period of time. You can create these ",Object(r.b)("em",{parentName:"p"},"inverted channels")," by taking advantage of the fact that channels unwrap and await promises and promise-like objects which are passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"push")," function:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'const timer = new Channel(async (push, stop) => {\n  const timeouts = [];\n  let stopped = false;\n  stopped.then(() => (stopped = true));\n  while (!stopped) {\n    let resolve;\n    let reject;\n    await push(new Promise((resolve1, reject1) => {\n      resolve = resolve1;\n      reject = reject1;\n    });\n    timeouts.push({\n      resolve,\n      reject,\n      timeout: setTimeout(() => {\n        resolve(Date.now());\n        timeouts.unshift();\n      }, 1000),\n    });\n  }\n  for (const timeout of timeouts) {\n    reject(new Error("This error is never seen"));\n    clearTimeout(timer.timeout);\n  }\n});\n')),Object(r.b)("p",null,"In the example, we push a newly constructed promise and retain the ",Object(r.b)("inlineCode",{parentName:"p"},"resolve")," and ",Object(r.b)("inlineCode",{parentName:"p"},"reject")," functions so that we can settle the promise later. For unbuffered channels, ",Object(r.b)("inlineCode",{parentName:"p"},"push")," calls resolve when ",Object(r.b)("inlineCode",{parentName:"p"},"next")," is called, so the ",Object(r.b)("inlineCode",{parentName:"p"},"setTimeout")," call does not start until a value is pulled from the channel."),Object(r.b)("p",null,"Finally, to cleanup the channel, we break out of the while loop when ",Object(r.b)("inlineCode",{parentName:"p"},"stop")," resolves, reject any pending promises which were released, and call ",Object(r.b)("inlineCode",{parentName:"p"},"clearTimeout")," on all timeout ids. Because pushed promises which reject after a channel is stopped are dropped, the channel will finish instead of emitting new values."),Object(r.b)("p",null,"The ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/channeljs/channel/blob/master/packages/pubsub/src/index.ts"}),Object(r.b)("inlineCode",{parentName:"a"},"@channel/timer")," package")," exports the ",Object(r.b)("inlineCode",{parentName:"p"},"delay")," and ",Object(r.b)("inlineCode",{parentName:"p"},"timeout")," utility functions which use this inverted channel algorithm described above."))}p.isMDXComponent=!0}}]);